<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>4.2.2.Final</version>
</dependency>
<dependency>
    <groupId>antlr</groupId>
    <artifactId>antlr</artifactId>
    <version>2.7.7</version>
</dependency>
<dependency>
    <groupId>dom4j</groupId>
    <artifactId>dom4j</artifactId>
    <version>1.6.1</version>
</dependency>
<dependency>
    <groupId>net.sf.ehcache</groupId>
    <artifactId>ehcache</artifactId>
    <version>2.4.3</version>
    <type>pom</type>
</dependency>
<dependency>
    <groupId>org.hibernate.common</groupId>
    <artifactId>hibernate-commons-annotations</artifactId>
    <version>4.0.2.Final</version>
</dependency>
<dependency>
    <groupId>org.hibernate.javax.persistence</groupId>
    <artifactId>hibernate-jpa-2.0-api</artifactId>
    <version>1.0.1.Final</version>
</dependency>
<dependency>
    <groupId>org.javassist</groupId>
    <artifactId>javassist</artifactId>
    <version>3.15.0-GA</version>
</dependency>
<dependency>
    <groupId>org.eclipse.persistence</groupId>
    <artifactId>javax.persistence</artifactId>
    <version>2.0.0</version>
</dependency>
<dependency>
    <groupId>org.jboss.logging</groupId>
    <artifactId>jboss-logging</artifactId>
    <version>3.1.0.GA</version>
</dependency>
<dependency>
    <groupId>org.jboss.spec.javax.transaction</groupId>
    <artifactId>jboss-transaction-api_1.1_spec</artifactId>
    <version>1.0.1.Final</version>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.45</version>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.6.1</version>
</dependency>



//Code for automatic file upload progress
 async function indirectDelay()
      { 
      	var uploadForm = document.getElementById('uploadForm');
      	
		var uploadFormData = new FormData(uploadForm);
		var xhr = new XMLHttpRequest();
  		/* xhr.onreadystatechange=function(){
  		if (xhr.readyState === XMLHttpRequest.DONE) {
  	
       	 if (xhr.status === 200) {
       	// alert(xhr.status);
       		//window.location.href = "/ProductHierarchy/servlet/com.deere.u90.producthierarchy.view.servlets.LogBeanServlet";
       		 }
       	 }
       
        }; */
		  xhr.open('POST', "/ProductHierarchy/servlet/com.deere.u90.producthierarchy.view.servlets.RegionFileUploadTest2", true);
		 await xhr.send(uploadFormData);
		   delay(100);
		    $("#myProgress").show();
		   $(".progress-uxf").show();
		  
		   
	}
      
      function delay(milliseconds) {
     	var pro = new Promise(function(resolve, reject) {
     			 setTimeout(function() {
     			 var request = new XMLHttpRequest();
     			  request.responseType = 'text';
      				request.onreadystatechange=function(){
      				 var elem = document.getElementById('myBar');
      				 if (request.readyState === XMLHttpRequest.DONE) {
      				
       					 if (request.status === 200) {
       					 	
       					 var  width=request.responseText *1;
       					 
             			  if (width >= 100) {
             			     window.location.href = "/ProductHierarchy/servlet/com.deere.u90.producthierarchy.view.servlets.LastUpdateBeanServlet";
            	 			 return;
         	    			 
         	  			  } else {
		         	      width++;
		         	    
		         	      elem.style.width = width + '%'; 
		         	      elem.innerHTML = width * 1  + '%';
		         	      delay(100);
		         	  }
        				  resolve(width);
       					 } else {
         						 reject(Error(request.statusText));
       							 }
     					 }
   							 };
  					  request.onerror = function() {
  					   window.location.href = "/ProductHierarchy/servlet/com.deere.u90.producthierarchy.view.servlets.LastUpdateBeanServlet";
   					 //  reject(Error("Network Error"));
				    };
				 request.open("GET", "/ProductHierarchy/servlet/com.deere.u90.producthierarchy.view.servlets.FileUploadProgressServlet", true);
            		request.send(null);
      }, milliseconds);
    });
    
	return pro;
  }
  
    function loader()
    {
     <%
		if (getServletConfig().getServletContext().getAttribute("flag") != null) {
		int flagVal = (Integer) getServletConfig().getServletContext().getAttribute("flag");
		if(flagVal==1){
		out.println("indirectDelay()");
		}
		System.out.println("Flag value is "+flagVal);
		}
		%>
	 }
     
     <body onload="loader()" >
     //Set Application Context for Whole Application getting lock on srceen and refresh button
     ServletContext application =  getServletConfig().getServletContext();
     ProductHeirarchyApplication.setApplication(null);
	ProductHeirarchyApplication.setApplication(application);//Setter accept servlet context Object
            
   ///set the progress counter value
    private void updatePercentOfProgressCounter(int rowNumber, int totalRowCount) {
		int percent = (int) ((rowNumber * 100) / totalRowCount);
		//HttpSession session = ProductHeirarchyApplication.getSession();
		ServletContext application = ProductHeirarchyApplication.getApplication();
		if (application != null) {
			application.setAttribute("progressCounter", percent);
		}
		/*if (session != null) {
			session.setAttribute("progressCounter", percent);
		}*/
	}


///File Upload Servlet
protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		response.setContentType("text/plain");
		response.setCharacterEncoding("UTF-8");
		int progressCounter = 0;
		ServletContext application = getServletConfig().getServletContext();
		// HttpSession session = ProductHeirarchyApplication.getSession();

		if (application == null) {
			application = getServletConfig().getServletContext();
		}
		/*
		 * if(session== null) { session=
		 * ProductHeirarchyApplication.getSession(); }
		 */

		if (application.getAttribute("progressCounter") != null) {
			progressCounter = Integer.parseInt((String.valueOf(application.getAttribute("progressCounter"))));
		}
		/*
		 * if(session.getAttribute("progressCounter")!= null) { progressCounter
		 * = Integer.parseInt((String.valueOf(session.getAttribute(
		 * "progressCounter")))); }
		 */
		System.out.println("FileUploadProgressServlet hit.." + progressCounter);
		response.getWriter().write(String.valueOf(progressCounter));

	}
    
    
    
    //Css code
    #myProgress {
  width: 100%;
  background-color: #ddd;
}

#myBar {
  width: 10%;
  height: 30px;
  background-color: #4CAF50;
  text-align: center;
  line-height: 30px;
  color: white;
}

//HTMl Code
 <div id="myProgress" style="display:none;">
  <div id="myBar"></div>
  
  
   <div class="progress-uxf" style="display:none;">
            <div class="progress-circles-uxf progress-uxf-lg active">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
            </div>
        </div>   



